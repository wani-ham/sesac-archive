<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HOME</title>
    <!-- CDN -->
     <!-- 서버가 실행 중이지 않아도 클라이언트 라이브러리를 사용할 수 있음 -->
    <!-- <script src="https://cdn.socket.io/4.7.5/socket.io.min.js" integrity="sha384-2huaZvOR9iDzHqslqwpR87isEmrfxqyWOF7hr7BY6KG0+hVKLoEXMPUJw3ynWuhO" crossorigin="anonymous"></script> -->
    
    <!-- socket.io server가 제공하는 클라이언트 라이브러리 -->
    <script src="/socket.io/socket.io.js"></script>

    <style>
        /* 실습2: 채팅창 UI */
        .chat-list {
            background-color: skyblue;
            height: 500px;
            padding: 10px;
            overflow-y: auto;
        }

        .chat-list div {
            margin-top: inline-block;
        }

        .chat-list div div {
            padding: 3px;
            display: inline-block;
        }

        .my-chat {
            text-align: right;
        }

        .my-chat div {
            background-color: yellow;
        }

        .other-chat div {
            background-color: white;
        }

        .notice {
            text-align: center;
            color: #333;
            font-size: 12px;
        }

        .d-none {
            display: none;
        }
    </style>
</head>
<body>
    <h1>My Chat</h1>

    <!-- [실습 1] 각 버튼을 누를때마다 서버로 메세지 전송  -->
    <!-- <button onclick="sayHello();">Hello</button>
    <button onclick="sayStudy();">Study</button>
    <button onclick="sayBye();">Bye</button>
    <p id="from-server"></p> -->

    <!-- 실습 3-2: socket.id를 닉네임으로. -->
     <div class="entry-box">
        <input 
            type="text" 
            id="nickname"
            placeholder="nickname"
            autofocus
            onkeypress="if(window.event.keyCode==13)(join())"
        />
        <button type="button" onclick="join();">Enter</button>
     </div>
    <br>
    

    <!-- [실습 2] 채팅 UI 만들기 -->
     <main class="chat-box d-none">
        <div class="chat-list">
            <div class="my-chat">
                <div>user1: msg1</div>
            </div>
            <div class="other-chat">
                <div>user2: msg2</div>
            </div>
        </div>

        To <select id="nick-list"></select>
        <input 
            type="text"
            id="message"
            onkeypress="if(window.event.keyCode==13)(send())">
        <button type="button" onclick="send()">Send</button>

     </main>

    <script>
        let socket = io();
        socket.on('connect', () => {
            console.log(`Client connected :: ${socket.id}`);
            console.log(socket);
        })

        // 실습 1
        // function sayHello() {
        //     socket.emit('hello', {who: 'client', msg: 'hello'});
        // }

        // socket.on('hellokr', (data) => {
        //     console.log(`Who: ${data.who}, MSG: ${data.msg}`);
        //     document.querySelector('#from-server').textContent = `Who: ${data.who}, MSG: ${data.msg}`;
        // })

        // function sayStudy() {
        //     socket.emit('study', {who: 'client', msg: 'study'});
        // }

        // socket.on('studykr', (data) => {
        //     console.log(`Who: ${data.who}, MSG: ${data.msg}`);
        //     document.querySelector('#from-server').textContent = `Who: ${data.who}, MSG: ${data.msg}`;
        // })

        // function sayBye() {
        //     socket.emit('bye', {who: 'client', msg: 'bye'});
        // }

        // socket.on('byekr', (data) => {
        //     console.log(`Who: ${data.who}, MSG: ${data.msg}`);
        //     document.querySelector('#from-server').textContent = `Who: ${data.who}, MSG: ${data.msg}`;
        // })

        // 실습 3
        socket.on('notice', (msg) => {
            console.log(msg);
            document.querySelector('.chat-list').insertAdjacentHTML('beforeend', `<div class="notice">${msg}</div>`);
            // innerHTML vs innerAdjacentHTML
            // innerAdjacentHTML: 삽입할 위치를 명시적으로 지정가능. 특정 위치에 html을 추가하려면 사용
            // beforeend, beforebegin, afterbegin, afterend
            // innerHTML: 요소에 전체 내용을 대체하게 됨. 요소의 내용을 한번에 대체하거나 가져올 수 있음.
        })

        // 실습 3-2 socketid -> nickname
        function join() {
            socket.emit('setNick', document.querySelector('#nickname').value);
        }

        // 실습 3-2-1
        socket.on('error', (data) => {
            alert(data);
        })

        // 실습 3-2-2
        let myNick;
        socket.on('entrySuccess',  (nick) => {
            myNick = nick;
            document.querySelector('#nickname').disabled = true;
            document.querySelector('.entry-box > button').disabled = true;
            document.querySelector('.chat-box').classList.remove('d-none');
        })

        socket.on('updateNicks', (nickObjs) => {
            let options = `<option value="all">All</option>`;

            for (const [key, value] of Object.entries(nickObjs)) {
                options += `<option value="${key}">${value}</option>`;
            }

            document.querySelector('#nick-list').innerHTML = options;
        })

        function send() {
            const data = {
                dm: document.querySelector('#nick-list').value,
                myNick,
                msg: document.querySelector('#message').value
            }
            socket.emit('send', data);
        }

        socket.on('newMessage', (data) => {
            console.log(`client :: ${data.nick} || ${data.msg}`);
            let chatList = document.querySelector('.chat-list');
            let div = document.createElement('div');
            let divChat = document.createElement('div');
            if (myNick === data.nick) {
                div.classList.add('my-chat');
            } else {
                div.classList.add('other-chat');
            }
            divChat.textContent += `${data.msg}`;
            div.append(divChat);
            chatList.append(div);
        })
    </script>
</body>
</html>